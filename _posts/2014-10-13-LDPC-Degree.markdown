---
layout: post
title: "LDPC码的度分布&节点数量"
category: 技术
tags: LDPC CV-QKD
---

####前言
  最近在研究新的LDPC码型对系统性能影响的时候发现关于LDPC码的度分布表示有些混乱，特此整理下：

####一、规则LDPC码的度分布
  规则LDPC码的度分布最简洁，直接用两个数字表示变量节点和校验节点的度就可以了，也没什么歧义，比如（6,3）码表示变量节点的度为6而校验节点的度为3，并由此确定变量节点的数量为校验节点数量的两倍。
  
####二、非规则LDPC码的度分布
  混乱是从非规则LDPC码开始的，首先来看一个简单的非规则LDPC码的度分布（据说是802.16e中码率为0.5的码，尚未验证）：
![interpreter pattern](/public/upload/LDPC-Degree/f1.jpg)
  从中可以看出两个度分布的系数之和均为1，即理解为确定了变量节点的总数**N**和校验节点的总数**M**后可以通过每种度分布的比例分别计算个数，这样表示也很好理解。但是问题来了：
  从Tanner图的角度理解，连接至变量节点和校验节点的边的总数必然是相等的，即：
![interpreter pattern](/public/upload/LDPC-Degree/f2.jpg)
  根据上面列出的度分布，可以得到：
  $$3.2917N = 6.3333M$$
  那么，根据传统的LDPC码的码率计算公式![interpreter pattern](/public/upload/LDPC-Degree/f3.jpg)，可以计算出码率为：R=0.6580。那么问题来了：这个码的码率明明为0.5，为什么按照边的数量计算出来的码率为0.65呢？
  
  再次观察上面关于**M**和**N**的关系式，注意到两者的系数比为0.5左右，于是依次得出结论：此处的码率计算公式应为：
  ![interpreter pattern](/public/upload/LDPC-Degree/f4.jpg)
  OK，到此发现虽然码率R不等于0.5，但也还算挺接近了，即如果变量节点总数N=10000，那么校验节点的数量便不是整数5000，而是约等于5197的一个小数。在实际生成H矩阵的时候，由于行数和列数为整数，因此必然会出现某行（一般为最后几行）的1的个数并不满足度分布，因为虽然里理论上要求变量节点和校验节点上的边总数相等，但是由于上述误差，导致按照行所计算出来的边数量和按照列计算出来的边数量不相等，所以必然出现某些不符合度分布要求的行或列。
  但是至此还是有一个问题没有解决：为什么上面计算码率的公式和传统的码率计算方式不同呢？这是两套标准还是说只是上面这个码的表示方式比较奇怪？
  按照上面这种计算方式，**N**表示的应当是变量节点和校验节点的总和，而**M**则表示校验节点的数量，对应到实际的**H**矩阵中即**N**表示列数，**M**表示行数，貌似也很有道理~
  
  那我们再来看几组度分布：
  ![interpreter pattern](/public/upload/LDPC-Degree/f5.jpg)
  
  这张表摘自一篇关于非规则LDPC码密度进化的中文论文：[不规则LDPC码的密度进化方法](http://www.cqvip.com/qk/91130a/200504/15487687.html)
  
  首先验证一下表中各种度分布的比例值相加是否为1，恩，这点还是一致的……
  
  然后看表中的第一种码，按照和之前相同的计算方法，得出码率为R=0.0315，好吧，此处暂且不纠结为什么码率这么低的码信噪比门限还这么高，我们接着看第二中码，同样按照上面的计算，可以得出码率R=-0.2701。额额额，怎么负了，这是闹哪样……也就是说这里按照上面的码率计算式是不行的，重新按照标准的**R**计算式可以得出第一种码的码率为0.508，是个比较正常的值，第二种码的码率为0.4405，也挺正常。
  
  那么根据上述的计算，能不能判断码率的计算有两种方法？其主要区别是变量节点的度分布表达式中是否包含校验节点的度分布信息，即**N**表示的是编码后的序列长度还是序列中的变量节点的长度？另一种可能是前面那种度分布本来就是错的，或者说不标准的。但是这也同样给出了一个启示：如果以后再遇到一个LDPC码的度分布也是用第一种方式表示的，那么通过计算R值也不一定能判断哪种方式才是对的，因为两种计算方法算出的码率可能都是正常值，所以拿到一个度分布还是同时确定下码率吧。
  
  虽然上面的分析已经有了初步结论，但是问题到这里还没有结束……更混乱的还在下面。
####三、多边LDPC的度分布
  (重点内容，待下次整理完再补充，嘿嘿~)
  
  